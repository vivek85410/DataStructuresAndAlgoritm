code link - https://www.naukri.com/code360/problems/sort-linked-list-of-0s-1s-2s_1071937?leftPanelTab=0%3Fsource%3Dyoutube&campaign=YouTube_Lovebabbar31stJan2021&utm_source=youtube&utm_medium=affiliate&utm_campaign=YouTube_Lovebabbar31stJan2021&leftPanelTabValue=SUBMISSION


APPROACH - 1 ------------------------------------------------------------------------------


Node* sortList(Node *head){
    int zeroCount = 0;
    int oneCount = 0;
    int twoCount = 0;

    Node* temp = head;
    while(temp!=NULL){
        if(temp -> data == 0){
            zeroCount++;
        }
        else if (temp -> data == 1){
            oneCount++;
        }
        else if (temp -> data == 2){
            twoCount++;
        }
        temp = temp -> next;
    }

    temp = head;
    while(temp != NULL){
        if(zeroCount != 0){
            temp -> data = 0;
            zeroCount--;
        }
        else if (oneCount != 0){
            temp -> data = 1;
            oneCount--;
        }
        else if(twoCount != 0){
            temp -> data = 2;
            twoCount--;
        }
        temp = temp -> next;
    }
    return head;
}


APPROACH - 2 -------------------------------------------------------------------------------



void mergesort(Node* &tail, Node* curr){
    tail -> next = curr;
    tail = curr;
}


Node* sortList(Node *head){
    Node* zeroHead = new Node(-1);
    Node* zeroTail = zeroHead;
    Node* oneHead = new Node(-1);
    Node* oneTail = oneHead;
    Node* twoHead = new Node(-1);
    Node* twoTail = twoHead;

    Node* curr = head;
    while(curr!= NULL){
        int value = curr -> data;
        if(value == 0){
            mergesort(zeroTail,curr);
        }
        else if(value == 1){
            mergesort(oneTail,curr);
        }
        else if(value == 2){
            mergesort(twoTail,curr);
        }
        curr = curr -> next;
    }

// merge all tha list.
    if(oneHead -> next != NULL){
        zeroTail -> next = oneHead -> next;
    } else {
        zeroTail->next = twoHead->next;
    }
    oneTail -> next = twoHead -> next;
    twoTail -> next = NULL;
    head =zeroHead -> next;

    // delete dummy nodes
    delete zeroHead;
    delete oneHead;
    delete twoHead;

    
return head;
}
