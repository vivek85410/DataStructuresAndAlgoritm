code link - https://www.geeksforgeeks.org/problems/check-if-linked-list-is-pallindrome/1


APPROACH - 1 ------------------------------------------------------------------------------------------------------------------


#include<vector>

class Solution{
    private:
    
    bool checkpalindrome(vector<int> arr){
        
        int s = 0;
        int e = arr.size()-1;
        while(s<=e){
            if(arr[s]!=arr[e]){
                return 0;
            }
            s++;
            e--;
        }
        return 1;
    }
    
  public:
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        vector<int>arr;
        Node* temp = head;
        while(temp!=NULL){
            arr.push_back(temp -> data);
            temp = temp -> next;
        }
        return checkpalindrome(arr);
    }
};


APPROACH -2 -----------------------------------------------------------------------------------------------------------------------


#include<vector>

class Solution{
    private:
    
    Node* getmid(Node* head){
        Node* slow = head;
        Node* fast = head -> next;
        
        while(fast!=NULL && fast -> next != NULL){
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        return slow;
    }
    
    Node* reverse(Node* head){
        Node* curr = head;
        Node* prev = NULL;
        Node* next = NULL;
        
        while(curr != NULL){
            next = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    
  public:
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
       if(head->next==NULL){
           return true;
       }
       
       //step 1 find the middle
       Node* middle = getmid(head);
       
       //step 2 reverse the array
       Node* temp = middle -> next;
       middle -> next = reverse(temp);
       
       // compare the Nodes
       Node* head1 = head;
       Node* head2 = middle -> next;
       
       while(head2!=NULL){
           if(head1 -> data != head2 -> data){
               return false;
           }
            head1 = head1 -> next;
            head2 = head2 -> next;
       }
       
       // repeat step 2;
       temp = middle -> next;
       middle -> next = reverse(temp);
       
       return true;
    }
};
